{"/home/travis/build/npmtest/node-npmtest-mongojs/test.js":"/* istanbul instrument in package npmtest_mongojs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongojs/lib.npmtest_mongojs.js":"/* istanbul instrument in package npmtest_mongojs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mongojs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mongojs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mongojs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mongojs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mongojs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mongojs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mongojs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_mongojs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mongojs.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_mongojs.__dirname +\n                    '/lib.npmtest_mongojs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongojs/mongojs/index.js":"var Database = require('./lib/database')\nvar mongodb = require('mongodb')\n\nmodule.exports = function (connString, cols, options) {\n  var db = new Database(connString, cols, options)\n  if (typeof Proxy !== 'undefined') {\n    var handler = {\n      get: function (obj, prop) {\n        // Work around for event emitters to work together with harmony proxy\n        if (prop === 'on' || prop === 'emit') {\n          return db[prop].bind(db)\n        }\n\n        if (db[prop]) return db[prop]\n        db[prop] = db.collection(prop)\n        return db[prop]\n      }\n    }\n\n    return Proxy.create === undefined ? new Proxy({}, handler) : Proxy.create(handler)\n  }\n\n  return db\n}\n\n// expose bson stuff visible in the shell\nmodule.exports.Binary = mongodb.Binary\nmodule.exports.Code = mongodb.Code\nmodule.exports.DBRef = mongodb.DBRef\nmodule.exports.Double = mongodb.Double\nmodule.exports.Long = mongodb.Long\nmodule.exports.NumberLong = mongodb.Long // Alias for shell compatibility\nmodule.exports.MinKey = mongodb.MinKey\nmodule.exports.MaxKey = mongodb.MaxKey\nmodule.exports.ObjectID = mongodb.ObjectID\nmodule.exports.ObjectId = mongodb.ObjectId\nmodule.exports.Symbol = mongodb.Symbol\nmodule.exports.Timestamp = mongodb.Timestamp\n","/home/travis/build/npmtest/node-npmtest-mongojs/mongojs/lib/database.js":"var Collection = require('./collection')\nvar mongodb = require('mongodb')\nvar xtend = require('xtend')\nvar thunky = require('thunky')\nvar parse = require('parse-mongo-url')\nvar util = require('util')\nvar EventEmitter = require('events').EventEmitter\n\nvar noop = function () {}\n\nvar Database = function (connString, cols, options) {\n  var self = this\n\n  EventEmitter.call(this)\n\n  if (typeof connString === 'string') {\n    this._dbname = parse(connString).dbName\n\n    // Fix short cut connection URLs consisting only of a db name or db + host\n    if (connString.indexOf('/') < 0) {\n      connString = 'localhost/' + connString\n    }\n\n    if (connString.indexOf('mongodb://') < 0) {\n      connString = 'mongodb://' + connString\n    }\n\n    this._getConnection = thunky(function (cb) {\n      mongodb.connect(connString, options, function (err, db) {\n        if (err) {\n          self.emit('error', err) // It's safer to emit an error instead of rely on the cb to handle the error\n          return cb(err)\n        }\n\n        self.emit('connect')\n        cb(null, db)\n      })\n    })\n  } else if (typeof connString._getConnection === 'function') { // mongojs\n    this._dbname = connString._dbname\n    this._getConnection = connString._getConnection\n  } else { // try mongodb-native\n    this._dbname = parse(connString.options.url).dbName\n\n    this._getConnection = thunky(function (cb) {\n      cb(null, connString)\n    })\n  }\n\n  this.ObjectId = mongodb.ObjectId\n\n  cols = cols || []\n  cols.forEach(function (colName) {\n    self[colName] = self.collection(colName)\n\n    var parts = colName.split('.')\n\n    var last = parts.pop()\n    var parent = parts.reduce(function (parent, prefix) {\n      parent[prefix] = parent[prefix] || {}\n      return parent[prefix]\n    }, self)\n\n    parent[last] = self.collection(colName)\n  })\n}\n\nutil.inherits(Database, EventEmitter)\n\nDatabase.prototype.collection = function (colName) {\n  return new Collection({name: colName}, this._getConnection)\n}\n\nDatabase.prototype.close = function (force, cb) {\n  if (typeof force === 'function') { return this.close(false, force) }\n\n  var self = this\n\n  cb = cb || noop\n  this._getConnection(function (err, server) {\n    if (err) return cb(err)\n\n    server.close(force)\n\n    self.emit('close')\n    cb()\n  })\n}\n\nDatabase.prototype.runCommand = function (opts, cb) {\n  cb = cb || noop\n  if (typeof opts === 'string') {\n    var tmp = opts\n    opts = {}\n    opts[tmp] = 1\n  }\n\n  this._getConnection(function (err, connection) {\n    if (err) return cb(err)\n    connection.command(opts, function (err, result) {\n      if (err) return cb(err)\n      cb(null, result)\n    })\n  })\n}\n\nDatabase.prototype.listCollections = function (cb) {\n  this._getConnection(function (err, connection) {\n    if (err) { return cb(err) }\n\n    connection.listCollections().toArray(function (err, collections) {\n      if (err) { return cb(err) }\n      cb(null, collections)\n    })\n  })\n}\n\nDatabase.prototype.getCollectionNames = function (cb) {\n  this.listCollections(function (err, collections) {\n    if (err) { return cb(err) }\n    cb(null, collections.map(function (collection) { return collection.name }))\n  })\n}\n\nDatabase.prototype.createCollection = function (name, opts, cb) {\n  if (typeof opts === 'function') return this.createCollection(name, {}, opts)\n\n  var cmd = {create: name}\n  Object.keys(opts).forEach(function (opt) {\n    cmd[opt] = opts[opt]\n  })\n  this.runCommand(cmd, cb)\n}\n\nDatabase.prototype.stats = function (scale, cb) {\n  if (typeof scale === 'function') return this.stats(1, scale)\n  this.runCommand({dbStats: 1, scale: scale}, cb)\n}\n\nDatabase.prototype.dropDatabase = function (cb) {\n  this.runCommand('dropDatabase', cb)\n}\n\nDatabase.prototype.createUser = function (usr, cb) {\n  var cmd = xtend({createUser: usr.user}, usr)\n  delete cmd.user\n  this.runCommand(cmd, cb)\n}\nDatabase.prototype.addUser = Database.prototype.createUser\n\nDatabase.prototype.dropUser = function (username, cb) {\n  this.runCommand({dropUser: username}, cb)\n}\nDatabase.prototype.removeUser = Database.prototype.dropUser\n\nDatabase.prototype.eval = function (fn) {\n  var cb = arguments[arguments.length - 1]\n  this.runCommand({\n    eval: fn.toString(),\n    args: Array.prototype.slice.call(arguments, 1, arguments.length - 1)\n  }, function (err, res) {\n    if (err) return cb(err)\n    cb(null, res.retval)\n  })\n}\n\nDatabase.prototype.getLastErrorObj = function (cb) {\n  this.runCommand('getLastError', cb)\n}\n\nDatabase.prototype.getLastError = function (cb) {\n  this.runCommand('getLastError', function (err, res) {\n    if (err) return cb(err)\n    cb(null, res.err)\n  })\n}\n\nDatabase.prototype.toString = function () {\n  return this._dbname\n}\n\nmodule.exports = Database\n","/home/travis/build/npmtest/node-npmtest-mongojs/mongojs/lib/collection.js":"var mongodb = require('mongodb')\nvar once = require('once')\nvar xtend = require('xtend')\nvar Cursor = require('./cursor')\nvar Bulk = require('./bulk')\n// TODO: Make this configurable by users\nvar writeOpts = {writeConcern: {w: 1}, ordered: true}\nvar noop = function () {}\nvar oid = mongodb.ObjectID.createPk\n\nvar Collection = function (opts, getConnection) {\n  this._name = opts.name\n  this._getConnection = getConnection\n  this._getCollection = function (cb) {\n    var collectionName = this._name\n\n    this._getConnection(function (err, connection) {\n      if (err) { return cb(err) }\n\n      cb(null, connection.collection(collectionName))\n    })\n  }\n}\n\nCollection.prototype.find = function (query, projection, opts, cb) {\n  if (typeof query === 'function') return this.find({}, null, null, query)\n  if (typeof projection === 'function') return this.find(query, null, null, projection)\n  if (typeof opts === 'function') return this.find(query, projection, null, opts)\n\n  var self = this\n  function getCursor (cb) {\n    self._getCollection(function (err, collection) {\n      if (err) { return cb(err) }\n\n      cb(null, collection.find(query, projection, opts))\n    })\n  }\n\n  var cursor = new Cursor(getCursor)\n\n  if (cb) return cursor.toArray(cb)\n  return cursor\n}\n\nCollection.prototype.findOne = function (query, projection, cb) {\n  if (typeof query === 'function') return this.findOne({}, null, query)\n  if (typeof projection === 'function') return this.findOne(query, null, projection)\n  this.find(query, projection).next(function (err, doc) {\n    if (err) return cb(err)\n    cb(null, doc)\n  })\n}\n\nCollection.prototype.findAndModify = function (opts, cb) {\n  this.runCommand('findAndModify', opts, function (err, result) {\n    if (err) return cb(err)\n    cb(null, result.value, result.lastErrorObject || {n: 0})\n  })\n}\n\nCollection.prototype.count = function (query, cb) {\n  if (typeof query === 'function') return this.count({}, query)\n  this.find(query).count(cb)\n}\n\nCollection.prototype.distinct = function (field, query, cb) {\n  this.runCommand('distinct', {key: field, query: query}, function (err, result) {\n    if (err) return cb(err)\n    cb(null, result.values)\n  })\n}\n\nCollection.prototype.insert = function (docOrDocs, opts, cb) {\n  if (!opts && !cb) return this.insert(docOrDocs, {}, noop)\n  if (typeof opts === 'function') return this.insert(docOrDocs, {}, opts)\n  if (opts && !cb) return this.insert(docOrDocs, opts, noop)\n\n  this._getCollection(function (err, collection) {\n    if (err) return cb(err)\n\n    var docs = Array.isArray(docOrDocs) ? docOrDocs : [docOrDocs]\n    for (var i = 0; i < docs.length; i++) {\n      if (!docs[i]._id) docs[i]._id = oid()\n    }\n\n    collection.insert(docs, xtend(writeOpts, opts), function (err) {\n      if (err) return cb(err)\n      // TODO: Add a test for this - is this really not needed anymore?\n      // if (res && res.result && res.result.writeErrors && res.result.writeErrors.length > 0) return cb(res.result.writeErrors[0])\n      cb(null, docOrDocs)\n    })\n  })\n}\n\nCollection.prototype.update = function (query, update, opts, cb) {\n  if (!opts && !cb) return this.update(query, update, {}, noop)\n  if (typeof opts === 'function') return this.update(query, update, {}, opts)\n\n  cb = cb || noop\n  this._getCollection(function (err, collection) {\n    if (err) return cb(err)\n\n    collection.update(query, update, xtend(writeOpts, opts), function (err, result) {\n      if (err) { return cb(err) }\n      cb(null, result.result)\n    })\n  })\n}\n\nCollection.prototype.save = function (doc, opts, cb) {\n  if (!opts && !cb) return this.save(doc, {}, noop)\n  if (typeof opts === 'function') return this.save(doc, {}, opts)\n  if (!cb) return this.save(doc, opts, noop)\n\n  if (doc._id) {\n    this.update({_id: doc._id}, doc, xtend({upsert: true}, opts), function (err) {\n      if (err) return cb(err)\n      cb(null, doc)\n    })\n  } else {\n    this.insert(doc, opts, cb)\n  }\n}\n\nCollection.prototype.remove = function (query, opts, cb) {\n  if (typeof query === 'function') return this.remove({}, {justOne: false}, query)\n  if (typeof opts === 'function') return this.remove(query, {justOne: false}, opts)\n  if (typeof opts === 'boolean') return this.remove(query, {justOne: opts}, cb)\n  if (!opts) return this.remove(query, {justOne: false}, cb)\n  if (!cb) return this.remove(query, opts, noop)\n\n  this._getCollection(function (err, collection) {\n    if (err) return cb(err)\n\n    var deleteOperation = opts.justOne ? 'deleteOne' : 'deleteMany'\n\n    collection[deleteOperation](query, xtend(writeOpts, opts), function (err, result) {\n      if (err) return cb(err)\n      cb(null, result.result)\n    })\n  })\n}\n\nCollection.prototype.rename = function (name, opts, cb) {\n  if (typeof opts === 'function') return this.rename(name, {}, opts)\n  if (!opts) return this.rename(name, {}, noop)\n  if (!cb) return this.rename(name, noop)\n\n  this._getCollection(function (err, collection) {\n    if (err) return cb(err)\n    collection.rename(name, opts, cb)\n  })\n}\n\nCollection.prototype.drop = function (cb) {\n  this.runCommand('drop', cb)\n}\n\nCollection.prototype.stats = function (cb) {\n  this.runCommand('collStats', cb)\n}\n\nCollection.prototype.mapReduce = function (map, reduce, opts, cb) {\n  if (typeof opts === 'function') { return this.mapReduce(map, reduce, {}, opts) }\n  if (!cb) { return this.mapReduce(map, reduce, opts, noop) }\n\n  this._getCollection(function (err, collection) {\n    if (err) return cb(err)\n\n    collection.mapReduce(map, reduce, opts, cb)\n  })\n}\n\nCollection.prototype.runCommand = function (cmd, opts, cb) {\n  if (typeof opts === 'function') return this.runCommand(cmd, null, opts)\n  opts = opts || {}\n\n  var cmdObject = {}\n  cmdObject[cmd] = this._name\n  Object.keys(opts).forEach(function (key) {\n    cmdObject[key] = opts[key]\n  })\n  this._getConnection(function (err, connection) {\n    if (err) return cb(err)\n    connection.command(cmdObject, cb)\n  })\n}\n\nCollection.prototype.toString = function () {\n  return this._name\n}\n\nCollection.prototype.dropIndexes = function (cb) {\n  this.runCommand('dropIndexes', {index: '*'}, cb)\n}\n\nCollection.prototype.dropIndex = function (index, cb) {\n  this.runCommand('dropIndexes', {index: index}, cb)\n}\n\nCollection.prototype.createIndex = function (index, opts, cb) {\n  if (typeof opts === 'function') return this.createIndex(index, {}, opts)\n  if (!opts) return this.createIndex(index, {}, noop)\n  if (!cb) return this.createIndex(index, opts, noop)\n\n  this._getCollection(function (err, collection) {\n    if (err) return cb(err)\n\n    collection.createIndex(index, opts, cb)\n  })\n}\n\nCollection.prototype.ensureIndex = function (index, opts, cb) {\n  if (typeof opts === 'function') return this.ensureIndex(index, {}, opts)\n  if (!opts) return this.ensureIndex(index, {}, noop)\n  if (!cb) return this.ensureIndex(index, opts, noop)\n\n  this._getCollection(function (err, collection) {\n    if (err) return cb(err)\n\n    collection.ensureIndex(index, opts, cb)\n  })\n}\n\nCollection.prototype.getIndexes = function (cb) {\n  this._getCollection(function (err, collection) {\n    if (err) { return cb(err) }\n\n    collection.indexes(cb)\n  })\n}\n\nCollection.prototype.reIndex = function (cb) {\n  this.runCommand('reIndex', cb)\n}\n\nCollection.prototype.isCapped = function (cb) {\n  this._getCollection(function (err, collection) {\n    if (err) { return cb(err) }\n\n    collection.isCapped(cb)\n  })\n}\n\nCollection.prototype.group = function (doc, cb) {\n  this._getCollection(function (err, collection) {\n    if (err) return cb(err)\n    collection.group(doc.key || doc.keyf, doc.cond, doc.initial, doc.reduce, doc.finalize, cb)\n  })\n}\n\nCollection.prototype.aggregate = function () {\n  var cb\n  var opts\n\n  var pipeline = Array.prototype.slice.call(arguments)\n  if (typeof pipeline[pipeline.length - 1] === 'function') {\n    cb = once(pipeline.pop())\n  }\n\n  if ((pipeline.length === 1 || pipeline.length === 2) && Array.isArray(pipeline[0])) {\n    opts = pipeline[1]\n    pipeline = pipeline[0]\n  }\n\n  var self = this\n\n  var strm = new Cursor(function (cb) {\n    self._getCollection(function (err, collection) {\n      if (err) return cb(err)\n\n      cb(null, collection.aggregate(pipeline, opts))\n    })\n  })\n\n  if (cb) {\n    return strm.toArray(cb)\n  }\n\n  return strm\n}\n\nCollection.prototype.initializeOrderedBulkOp = function () {\n  return new Bulk(this._name, true, this._getConnection, this._dbname)\n}\n\nCollection.prototype.initializeUnorderedBulkOp = function () {\n  return new Bulk(this._name, false, this._getConnection, this._dbname)\n}\n\nmodule.exports = Collection\n","/home/travis/build/npmtest/node-npmtest-mongojs/mongojs/lib/cursor.js":"var util = require('util')\nvar thunky = require('thunky')\nvar Readable = require('readable-stream').Readable\n\nvar Cursor = function (getCursor) {\n  Readable.call(this, {objectMode: true, highWaterMark: 0})\n\n  this._opts = {}\n\n  var self = this\n  this._get = thunky(function (cb) {\n    getCursor(function (err, cursor) {\n      if (err) { return cb(err) }\n\n      // Apply all opts\n      for (var key in self._opts) {\n        if (self._opts.hasOwnProperty(key)) {\n          cursor = cursor[key](self._opts[key])\n        }\n      }\n\n      cb(null, cursor)\n    })\n  })\n}\n\nutil.inherits(Cursor, Readable)\n\nCursor.prototype.next = function (cb) {\n  this._get(function (err, cursor) {\n    if (err) return cb(err)\n\n    if (cursor.cursorState.dead || cursor.cursorState.killed) {\n      return cb(null, null)\n    } else {\n      cursor.next(cb)\n    }\n  })\n\n  return this\n}\n\nCursor.prototype.rewind = function (cb) {\n  this._get(function (err, cursor) {\n    if (err) return cb(err)\n    cursor.rewind(cb)\n  })\n\n  return this\n}\n\nCursor.prototype.toArray = function (cb) {\n  var array = []\n  var self = this\n\n  var loop = function () {\n    self.next(function (err, obj) {\n      if (err) return cb(err)\n      if (!obj) return cb(null, array)\n      array.push(obj)\n\n      // Fix for #270 RangeError: Maximum call stack size exceeded using Collection.find\n      setImmediate(loop)\n    })\n  }\n\n  loop()\n}\n\nCursor.prototype.map = function (mapfn, cb) {\n  var array = []\n  var self = this\n\n  var loop = function () {\n    self.next(function (err, obj) {\n      if (err) return cb(err)\n      if (!obj) return cb(null, array)\n      array.push(mapfn(obj))\n\n      // Fix for #270 RangeError: Maximum call stack size exceeded using Collection.find\n      setImmediate(loop)\n    })\n  }\n\n  loop()\n}\n\nCursor.prototype.forEach = function (fn) {\n  var self = this\n\n  var loop = function () {\n    self.next(function (err, obj) {\n      if (err) return fn(err)\n      fn(err, obj)\n\n      if (!obj) return\n\n      // Fix for #270 RangeError: Maximum call stack size exceeded using Collection.find\n      setImmediate(loop)\n    })\n  }\n\n  loop()\n}\n\n// Missing mongodb cursor methods are addOption, hasNext, itcount, readPref, showDiskLoc\nvar opts = ['batchSize', 'hint', 'limit', 'maxTimeMS', 'max', 'min', 'skip', 'snapshot', 'sort']\n\nopts.forEach(function (opt) {\n  Cursor.prototype[opt] = function (obj, cb) {\n    this._opts[opt] = obj\n    if (cb) return this.toArray(cb)\n    return this\n  }\n})\n\nCursor.prototype.count = function (cb) {\n  var self = this\n\n  this._get(function (err, cursor) {\n    if (err) { return cb(err) }\n    cursor.count(false, self.opts, cb)\n  })\n}\n\nCursor.prototype.size = function (cb) {\n  var self = this\n\n  this._get(function (err, cursor) {\n    if (err) { return cb(err) }\n    cursor.count(true, self.opts, cb)\n  })\n}\n\nCursor.prototype.explain = function (cb) {\n  this._get(function (err, cursor) {\n    if (err) { return cb(err) }\n    cursor.explain(cb)\n  })\n}\n\nCursor.prototype.destroy = function () {\n  var self = this\n  this._get(function (err, cursor) {\n    if (err) return self.emit('error', err)\n    if (cursor.close) {\n      cursor.close(function (err) {\n        if (err) { self.emit('error', err) }\n      })\n    }\n  })\n}\n\nCursor.prototype._read = function () {\n  var self = this\n  this.next(function (err, data) {\n    if (err) return self.emit('error', err)\n    self.push(data)\n  })\n}\n\nmodule.exports = Cursor\n","/home/travis/build/npmtest/node-npmtest-mongojs/mongojs/lib/bulk.js":"var mongodb = require('mongodb')\nvar each = require('each-series')\n\nvar noop = function () {}\nvar oid = mongodb.ObjectID.createPk\n\nvar Bulk = function (colName, ordered, onserver) {\n  this._colname = colName\n  this._cmds = []\n  this._currCmd = null\n  this._ordered = ordered\n  this._getConnection = onserver\n\n  var self = this\n  this.find = function (query) {\n    var upsert = false\n    var findobj = {}\n    var remove = function (lim) {\n      if (!self._currCmd) {\n        self._currCmd = {\n          delete: self._colname,\n          deletes: [],\n          ordered: self._ordered,\n          writeConcern: {w: 1}\n        }\n      }\n      if (!self._currCmd.delete) {\n        self._cmds.push(self._currCmd)\n        self._currCmd = {\n          delete: self._colname,\n          deletes: [],\n          ordered: self._ordered,\n          writeConcern: {w: 1}\n        }\n      }\n      self._currCmd.deletes.push({q: query, limit: lim})\n    }\n\n    var update = function (updObj, multi) {\n      if (!self._currCmd) {\n        self._currCmd = {\n          update: self._colname,\n          updates: [],\n          ordered: self._ordered,\n          writeConcern: {w: 1}\n        }\n      }\n      if (!self._currCmd.update) {\n        self._cmds.push(self._currCmd)\n        self._currCmd = {\n          update: self._colname,\n          updates: [],\n          ordered: self._ordered,\n          writeConcern: {w: 1}\n        }\n      }\n      self._currCmd.updates.push({q: query, u: updObj, multi: multi, upsert: upsert})\n    }\n\n    findobj.upsert = function () {\n      upsert = true\n      return findobj\n    }\n\n    findobj.remove = function () {\n      remove(0)\n    }\n\n    findobj.removeOne = function () {\n      remove(1)\n    }\n\n    findobj.update = function (updObj) {\n      update(updObj, true)\n    }\n\n    findobj.updateOne = function (updObj) {\n      update(updObj, false)\n    }\n\n    findobj.replaceOne = function (updObj) {\n      this.updateOne(updObj)\n    }\n\n    return findobj\n  }\n}\n\nBulk.prototype.insert = function (doc) {\n  if (!this._currCmd) {\n    this._currCmd = {\n      insert: this._colname,\n      documents: [],\n      ordered: this._ordered,\n      writeConcern: {w: 1}\n    }\n  }\n  if (!this._currCmd.insert) {\n    this._cmds.push(this._currCmd)\n    this._currCmd = {\n      insert: this._colname,\n      documents: [],\n      ordered: this._ordered,\n      writeConcern: {w: 1}\n    }\n  }\n  if (!doc._id) doc._id = oid()\n  this._currCmd.documents.push(doc)\n}\n\nvar cmdkeys = {\n  insert: 'nInserted',\n  delete: 'nRemoved',\n  update: 'nUpserted'\n}\n\nBulk.prototype.tojson = function () {\n  if (this._currCmd) this._cmds.push(this._currCmd)\n\n  var obj = {\n    nInsertOps: 0,\n    nUpdateOps: 0,\n    nRemoveOps: 0,\n    nBatches: this._cmds.length\n  }\n\n  this._cmds.forEach(function (cmd) {\n    if (cmd.update) {\n      obj.nUpdateOps += cmd.updates.length\n    } else if (cmd.insert) {\n      obj.nInsertOps += cmd.documents.length\n    } else if (cmd.delete) {\n      obj.nRemoveOps += cmd.deletes.length\n    }\n  })\n\n  return obj\n}\n\nBulk.prototype.toString = function () {\n  return JSON.stringify(this.tojson())\n}\n\nBulk.prototype.execute = function (cb) {\n  if (!cb) return this.execute(noop)\n\n  var self = this\n  var result = {\n    writeErrors: [ ],\n    writeConcernErrors: [ ],\n    nInserted: 0,\n    nUpserted: 0,\n    nMatched: 0,\n    nModified: 0,\n    nRemoved: 0,\n    upserted: [ ]\n  }\n\n  if (this._currCmd) {\n    this._cmds.push(this._currCmd)\n  }\n\n  this._getConnection(function (err, connection) {\n    if (err) return cb(err)\n    each(self._cmds, function (cmd, i, done) {\n      connection.command(cmd, function (err, res) {\n        if (err) return done(err)\n        result[cmdkeys[Object.keys(cmd)[0]]] += res.n\n        done()\n      })\n    }, function (err) {\n      if (err) return cb(err)\n      result.ok = 1\n      cb(null, result)\n    })\n  })\n}\n\nmodule.exports = Bulk\n"}